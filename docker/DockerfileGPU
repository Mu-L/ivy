# Stage 1: Base image for building the environment and dependencies
FROM debian:buster-slim AS builder
WORKDIR /ivy

# Arguments
ARG fw
ARG pycon=3.10

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe/Moscow
ENV CONDA_DIR /opt/miniconda/

# Install base libraries (slimmed down)
RUN grep security /etc/apt/sources.list | tee /etc/apt/security.sources.list && \
    apt-get update && \
    apt-get upgrade -o Dir::Etc::SourceList=/etc/apt/security.sources.list -y && \
    apt-get -y update && \
    apt-get install -y --no-install-recommends \
    gnupg \
    curl \
    wget \
    software-properties-common \
    gcc \
    nano \
    procps \
    git \
    jq && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Miniconda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh && \
    /bin/bash ~/miniconda.sh -b -p /opt/miniconda && \
    rm ~/miniconda.sh && \
    /opt/miniconda/bin/conda clean --all --yes

# Create conda environment
ENV PATH=$CONDA_DIR/bin:$PATH
RUN conda create --name multienv python=$pycon -y && \
    conda clean --all --yes

# Fix protobuf conflicts
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION python
ENV PATH=/opt/miniconda/envs/multienv/bin:$PATH

# Install necessary libraries and tools
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3-tk \
    libsm6 libxext6 libxrender-dev libgl1-mesa-glx \
    libusb-1.0-0 libglib2.0-0 && \
    pip3 install --upgrade pip && \
    pip3 install setuptools==58.5.3 && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Ivy and dependencies
RUN git clone --progress --recurse-submodules https://github.com/ivy-llc/ivy --depth 1 && \
    cd ivy && \
    cd ivy_tests/array_api_testing/test_array_api && \
    pip3 install --no-cache-dir -r requirements.txt

# Copy relevant scripts
COPY docker/gpu_framework_directory.py .
COPY requirements/optional_gpu.txt .
COPY requirements/requirements.txt .

# setting torch path early on because torch-scatter needs it
ENV PYTHONPATH "/opt/fw/torch:/opt/miniconda/envs/multienv/bin"

# requirement mappings directs which dependency to be installed and where
COPY docker/requirement_mappings_gpu.json .

SHELL ["/bin/bash", "-c"]

# Install frameworks based on mappings
RUN python3 gpu_framework_directory.py $fw && \
    jq -r 'to_entries[] | select(.value != [""]) | .key as $dir | .value[] | @sh "/opt/fw/\($dir) \(.)"' requirement_mappings_gpu.json | \
    xargs -I {} sh -c 'pip install --no-cache-dir --target $1 $2 --extra-index-url https://download.pytorch.org/whl/cu124' sh {}

# Remove numpy from requirements.txt in one go
RUN sed -i '/numpy/d' requirements.txt && \
    # Copy optional_gpu.txt to a temporary file for editing
    cp ./optional_gpu.txt tmp.txt && \
    # Use jq to extract entries from requirement_mappings_gpu.json,
    # filter out jaxlib and other entries, and remove them from tmp.txt in a single pass
    jq -r 'to_entries[] | select(.value | length > 0) | .key' requirement_mappings_gpu.json | \
    sort -u | xargs -I {} sed -i '/{}/d' tmp.txt && \
    # Combine both files (requirements.txt and tmp.txt) and install once with pip
    cat tmp.txt >> requirements.txt && \
    pip install --no-cache-dir -r requirements.txt && \
    # Clean up temporary files to reduce image size
    rm -rf tmp.txt

# Remove unnecessary files
RUN rm -rf /var/lib/apt/lists/*

# Stage 2: Final slim image with necessary dependencies
FROM debian:buster-slim
WORKDIR /ivy

# Copy miniconda and environments from the builder
COPY --from=builder /opt/miniconda /opt/miniconda
COPY --from=builder /opt/fw /opt/fw
COPY --from=builder /ivy /ivy

# Install additional libraries and git in the final stage
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git python3-tk libsm6 libxext6 libxrender-dev libgl1-mesa-glx \
    libusb-1.0-0 libglib2.0-0 && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Set PATH to include conda
ENV PATH="/opt/miniconda/envs/multienv/bin:/opt/miniconda/bin:$PATH"
ENV PYTHONPATH "/opt/fw/mxnet:/opt/fw/numpy:/opt/fw/tensorflow:/opt/fw/jax:/opt/fw/torch:/opt/fw/paddle:/opt/miniconda/envs/multienv/bin"
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION python

# Copy only the necessary scripts
COPY requirements/optional_gpu.txt .
COPY requirements/requirements.txt .

# Test dependencies
COPY scripts/test_dependencies.py .
RUN python3 test_dependencies.py -fp requirements.txt,optional_gpu.txt && \
    rm -rf requirements.txt tmp.txt optional_gpu.txt test_dependencies.py

# Clean up conda cache
RUN conda clean --all --yes

# Final cleanup
RUN rm -rf /var/lib/apt/lists/* /tmp/*
